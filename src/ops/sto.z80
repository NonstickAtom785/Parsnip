;This is for the sto token (-->)
;Input:
;   stack is the var pointer's pointer
;   DE points to the data to sto
;   if it is type_str or type_raw, BC is the size


eval_sto_LUT:
  .db (+_-$-1)/2
  .dw sto_ui8
  .dw sto_ui16
  .dw sto_ui32
  .dw sto_fixed88
  .dw sto_fixed1616
  .dw sto_var
  .dw sto_true
  .dw sto_false
  .dw sto_tstr_ref
  .dw sto_raw
  .dw sto_str
  .dw sto_str_ref
  .dw sto_single
  .dw sto_xfloat
  .dw sto_list
  .dw sto_list_ref
  .dw sto_char
_:


sto_char:
  ld a,type_char
  jr sto_

sto_ui8:
  ld a,type_ui8
  jr sto_

sto_ui32:
  ld a,type_ui32
  jr sto_

sto_fixed88:
  ld a,type_fixed88
  jr sto_

sto_fixed1616:
  ld a,type_fixed1616
  jr sto_

sto_true:
  ld a,type_true
  jr sto_

sto_false:
  ld a,type_false
  jr sto_

sto_single:
  ld a,type_single
  jr sto_

sto_xfloat:
  ld a,type_xfloat
  jr sto_

sto_ui16:
  ld a,type_ui16
sto_:
  pop hl
  ;HL points to the var's pointer
  push de
  call createvar
  pop de
  dec c
  ret z
  ex de,hl
  ldir
  ret

sto_var:
  jp err_syntax

sto_str_ref:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ld c,(hl)
  inc hl
  ld b,(hl)
  jr sto_str
sto_tstr_ref:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ld c,(hl)
  inc hl
  ld b,(hl)

  ld hl,OP1
  ex de,hl
  ld a,b
  or c
  jr nz,+_
  ex de,hl
  ld (hl),a
  ret
_:
  call tokstr2ascii
  ld hl,OP1
  call stringlength
  ld de,OP1
  ld a,type_str
  jr +_
sto_raw:
  ld a,type_raw
  jr +_
sto_str:
  ld a,type_str
_:
  push de
  push bc   ;size of string
  push af
  inc bc
  inc bc
  inc bc
  call alloc
  pop af
  ld (hl),a
  pop bc
  pop de
  push hl
  inc hl
  ld (hl),c
  inc hl
  ld (hl),b
  inc hl
  ex de,hl
  ld a,b
  or c
  jr z,$+4
  ldir
  pop de

  pop hl
  ld (hl),e
  inc hl
  ld (hl),d
  ret

sto_list_ref:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  ex de,hl
  inc hl
  ld c,(hl)
  inc hl
  ld b,(hl)
  inc hl
  .db $FE
sto_list:
  ex de,hl
;HL points to the list data
;BC is the size

;save the pointer
  push hl

;Need to copy BC+2 bytes, so increment BC by 2 and save for later
  inc bc
  inc bc
  push bc

;Need to allocate BC+1 bytes (the +1 is for the type byte)
  inc bc
  call alloc
  pop bc
  pop de

;Now BC is the number of bytes to copy
;DE-2 is the data to start copying
;HL points to the allocated region

;save HL for later (need it for setting the var's pointer)
  push hl

;Write the type
  ld (hl),type_list

;Now we need to copy BC bytes at DE-2 to HL+1. BC is strictly non-zero.
  inc hl
  dec de
  dec de
  ex de,hl
  ldir

;restore the data pointer and the var pointer's pointer
  pop de    ;data pointer
  pop hl    ;pointer to the var's pointer

;write the new value
  ld (hl),e
  inc hl
  ld (hl),d
  inc hl
  ret


createvar:
;Inputs:
;   HL points to the var's pointer
;   A is the type, cannot be variable-sized types
;Output:
;   HL points to the var data
;   DE points to the data to copy
;   BC is the size (so BC-1 is the size of the data)
;   A is the type

  push af
  ld de,type_size_LUT
  add a,e
  ld e,a
  jr nc,$+3
  inc d
  ld a,(de)
  ld c,a

  ld e,(hl)
  inc hl
  ld d,(hl)
  ld a,d
  or e
  jr z,allocvar

  ;The var exists, so let's allocate enough space.
  ;C is the size of the input type
  ;compare against the new
  ;
  ;If C is 0, it is a variable-size type, so we're just gonna create a new var.
  inc c
  dec c
  jp z,err_internal_fatal

  ld a,(de)
  push de
  ld de,type_size_LUT
  add a,e
  ld e,a
  jr nc,$+3
  inc d
  ld a,(de)
  pop de
  cp c
  jr nz,allocvar
  ;they are the same size, so let's overwrite!
  ld b,0
  pop af
  ex de,hl
  ld (hl),a
  inc hl
  ret

allocvar:
  push hl   ;top byte of var's pointer
  ;need to allocate C bytes
  ld b,0
  push bc
  call alloc
  pop bc
  pop de
  pop af
  ld (hl),a
  ex de,hl
  ld (hl),d
  dec hl
  ld (hl),e
  ex de,hl
  inc hl
  ret
