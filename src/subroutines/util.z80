; Routines:
;   is2byte
;   seek_EOS
;   seek_end
;   seek_Else_End
;   stringlength

seek_end:
;Start at (parsPtr)
  ld hl,(parseptr)
seek_end_from_HL:
  ld b,0

seek_end_inc:
  inc b
  .db $FE     ;start of `cp *`, this just eats the `inc hl` for 7cc and 1 byte
seek_end_inc_ptr:
  inc hl
seek_end_loop:
  ld a,(hl)
  inc hl
  call is2byte
  jr z,seek_end_inc_ptr
  cp $2A    ;"
  jr z,seek_end_str
  ;the tokens we care about are in [CE,D4]
  cp $D5
  jr nc,seek_end_loop
  sub $CE     ;If
  jr c,seek_end_loop
  jr z,seek_end_inc
  dec a       ;Then
  jr z,seek_end_loop
  dec a       ;Else
  jr z,seek_end_else
  dec a       ;While
  jr z,seek_end_inc
  dec a       ;repeat
  jr z,seek_end_inc
  dec a       ;For(
  jr z,seek_end_inc
  ;If it gets this far, it is End
  ;decrement B, and finish if it hits 0, otherwise keep looping
  djnz seek_end_loop
  ;set HL as parsePtr
  ld (parsePtr),hl
  ret

seek_end_else:
;If the next token is `If`, we need to skip it
  ld a,(hl)
  cp $CE
  jr z,seek_end_inc_ptr
  jr seek_end_loop

seek_end_str:
  push bc
  call seek_EOS
  pop bc
  jr seek_end_loop

seek_Else_End:
;Start at (parsPtr)
  ld hl,(parseptr)
  ld b,0

seek_Else_End_inc:
  inc b
  .db $FE     ;start of `cp *`, this just eats the `inc hl` for 7cc and 1 byte
seek_Else_End_inc_ptr:
  inc hl
seek_Else_End_loop:
  ld a,(hl)
  inc hl
  call is2byte
  jr z,seek_Else_End_inc_ptr
  cp $2A
  jr z,seek_Else_End_str
  ;the tokens we care about are in [CE,D4]
  cp $D5
  jr nc,seek_Else_End_loop
  sub $CE     ;If
  jr c,seek_Else_End_loop
  jr z,seek_Else_End_inc
  dec a       ;Then
  jr z,seek_Else_End_loop
  dec a       ;Else
  jr z,seek_Else_End_else
  dec a       ;While
  jr z,seek_Else_End_inc
  dec a       ;repeat
  jr z,seek_Else_End_inc
  dec a       ;For(
  jr z,seek_Else_End_inc
  ;If it gets this far, it is End
  ;decrement B, and finish if it hits 0, otherwise keep looping
  djnz seek_Else_End_loop
  ;set HL as parsePtr
_:
  ld (parsePtr),hl
  ret
seek_Else_End_else:
;If B=1, then we've found our matching Else, so quit
  dec b
  jr nz,seek_Else_End_inc
  ld a,(hl)
  cp $CE    ;If
  ld (parsePtr),hl
  ret z
  ;The matching End will expect a {00,$CE} on the opstack
  ld hl,(opstack_ptr)
  dec hl
  ld (hl),$CE
  dec hl
  ld (hl),0
  ld (opstack_ptr),hl
  ret

seek_Else_End_str:
  push bc
  call seek_EOS
  pop bc
  jr seek_Else_End_loop

seek_EOS:
;Inputs:
;   HL points to the source string data (after the open quote)
;Output:
;   HL points to the byte after the end-quote
;   BC is the size of the string

  ld bc,0
_:
  ld a,$2A
  cpir
  ;verify that the byte before it was not that of a 2-byte token
  dec hl
  dec hl
  ld a,(hl)
  inc hl
  inc hl
  call is2byte
  jr z,-_

;return -BC-1
;basically complement BC
  ld a,b \ cpl \ ld b,a
  ld a,c \ cpl \ ld c,a
  ret

stringlength:
;Returns BC as the length of the null-terminated string (including null byte).
  xor a
  ld c,a
  ld b,a
  cpir
  sub c
  ld c,a
  sbc a,a
  sub b
  ld b,a
  ret

is2byte:
  cp $BB
  ret z
  cp $EF
  ret z
  cp $AA
  ret z
  cp $5C
  ret z
  cp $5D
  ret z
  cp $5E
  ret z
  cp $60
  ret z
  cp $61
  ret z
  cp $62
  ret z
  cp $63
  ret
