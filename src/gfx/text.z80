PutS_at:
  ld (text_row),bc
  jr PutS

_:
  push hl
  call PutSC
  pop hl
PutS:
;Inputs:
;     HL points to a zero terminated string to display
;     (text_row) is the pixel row to draw at
;     (text_col) is the pixel col to draw at
;Outputs:
;     HL points to the byte after the string
;     A is 0
;Destroys:
;     DE,BC
  ld a,(hl)
  inc hl
  or a
  jr nz,-_
  ret
;===============================================================
PutSC:
;===============================================================
;Inputs:
;     a is the char to draw
;     (text_row) is the pixel row to draw at
;     (text_col) is the text column to draw at (0 to 23)
;===============================================================
  ld b,a
  ld a,(text_mode)
  or a
  jp z,+_
  dec a
  jp z,VPutC
  dec a
  jp z,VPutSC
  jp OmniCalcFont
_:
  push bc
  ld bc,(text_row)
  ld a,b
  cp 24
  ld a,c
  jr c,+_
  ld b,0
  add a,6
_:
  cp 3Bh
  jr c,+_
  sub 3Ch
  jr nc,+_
  add a,6
_:
  ld c,a
  inc b
  ld (text_row),bc
  dec b
  ld hl,(font_ptr)
  pop af
;===============================================================
PutFS:
;===============================================================
  push bc
  push hl
  ld b,0
  ld c,a
  ld h,b
  ld l,c
  add hl,hl
  add hl,bc
  pop de
  add hl,de
  pop bc
  push hl
  ld a,b
  ld b,0
  ld h,b
  ld l,c
  add hl,hl
  add hl,bc
  add hl,hl
  add hl,hl
  rra
  push af
  ld c,a
  add hl,bc
  ld bc,(gbuf_temp)
  add hl,bc
  ld bc,060Ch
;==========================================
;Added in for slow text
  bit SlowTextFlag,(iy+InternalFlag)
  jr z,SkipSlow
  push bc
  push hl
  call GraphToLCD
  pop hl
  pop bc
  ld a,(text_delay)
  ei
_:
  halt
  dec a
  jr nz,-_
  di
SkipSlow:
;==========================================
  pop af
  pop de
  jr c,PutRight
;===============================================================
PutLeft:
;===============================================================
  ld a,(hl)
  and 15
  ld (hl),a
  ld a,(de)
  bit InvertTextFlag,(iy+UserFlags)
  jr z,+_
  cpl
_:
  bit 0,b
  jr z,+_
  rlca \ rlca \ rlca \ rlca
  inc de
_:
  and $F0
  or (hl)
  ld (hl),a
  ld a,b
  ld b,0
  add hl,bc
  ld b,a
  djnz PutLeft
  ret
;===============================================================
PutRight:
;===============================================================
  ld a,(hl)
  and $F0
  ld (hl),a
  ld a,(de)
  bit InvertTextFlag,(iy+UserFlags)
  jr z,+_
  cpl
_:
  bit 0,b
  jr nz,+_
  rlca \ rlca \ rlca \ rlca
  dec de
_:
  inc de
  and 15
  or (hl)
  ld (hl),a
  ld a,b
  ld b,0
  add hl,bc
  ld b,a
  djnz PutRight
  ret
OmniCalcFont:
;Inputs:
;    B is the char to draw
  ld l,b
  ld h,0
  ld b,h
  ld c,l
  add hl,hl
  add hl,bc
  add hl,hl
  add hl,bc
  ld bc,(font_ptr)
  add hl,bc
  ld de,OP1
  ld b,7
_:
  ld a,(hl)
  rlca
  rlca
  rlca
  ld (de),a
  inc e
  inc hl
  djnz -_
  ld de,OP1
  ld hl,0706h
  jr VputSCStepIn
VPutSC:
;Inputs:
;    B is the char to draw
  ld a,b
  ld hl,(font_ptr)
  ld c,b
  ld b,0
  add hl,bc
  add hl,bc
  add hl,bc ;*3
  ld de,OP1
  ld b,3  ;3*2 Nibbles
_:
  ld a,(hl)
  and $F0
  ld (de),a
  inc e
  ld a,(hl)
  rrca \ rrca
  rrca \ rrca
  and $F0
  ld (de),a
  inc e
  inc hl
  djnz -_
  ld de,OP1
  ld hl,0604h
  jr VputSCStepIn
VPutC:
;Inputs:
;    B is the char to draw
  ld hl,(font_ptr)

;The first byte is the height of the font
  ld e,(hl)
  inc hl
  ld d,0

#ifdef INDEX_VFONT
  ld a,b
  sub 32
  jr c,+_
  ld b,a
  ld hl,(vfont_index)
  sub 16
  jr c,+_
  ld b,a
  ld hl,(vfont_index+2)
  sub 16
  jr c,+_
  ld b,a
  ld hl,(vfont_index+4)
  sub 32
  jr c,+_
  ld b,a
  ld hl,(vfont_index+6)
_:
  inc b
  call lookupchar_vfont
#else
  ;E is the height, assume non-zero
  ;HL points to the font data
  ;B is the char
  inc b
  jr vputc_loc_loop_end
vputc_loc_loop:
  ld a,(hl)
  inc hl
  dec a
  jp m,vputc_loc_loop_end
_:
  add hl,de
  sub 8
  jr nc,-_
vputc_loc_loop_end:
  djnz vputc_loc_loop
#endif
  ld d,e
  ld e,(hl)
  inc hl
  ex de,hl
VputSCStepIn:
  bit InvertTextFlag,(iy+UserFlags)
  jr z,VputSCStepIn_postinvert
  ;need to invert the text data
  ;DE points to the sprite
  ;H is height
  ;L is width
  push hl

  ld b,h
  ;get the mask to invert with
  ld a,l
  ld hl,spritemask
  add a,l
  ld l,a
  jr nc,+_
  inc h
_:
  ld c,(hl)
  ld hl,OP1
_:
  ld a,(de)
  xor c
  ld (hl),a
  inc hl
  inc de
  djnz -_
  ld de,OP1
  pop hl
VputSCStepIn_postinvert:
  push hl
  ld bc,(text_row)
  ld a,b \ add a,l
  cp 97
  jr c,+_
  ;We need to increment if font is variable-width
  ld a,(text_mode)
  dec a
  sub 1
  ld a,c
  adc a,h \ ld c,a
  ld a,l \ ld b,0
_:
  ld l,a
  ld a,c
  cp 58
  jr c,+_
  xor a
  ld c,a
_:
  ld h,l
  ld l,a
  ld (text_row),hl
  pop hl
  ld a,7
  add a,l
  and %11111000
  ret z
  rra
  rra
  rra
  ld l,a
  ld a,(text_logic)
  jp sprite
