to_str_LUT:
  .db (+_-$-1)/2
  .dw ui8_convert_to_str
  .dw ui16_convert_to_str
  .dw ui32_convert_to_str
  .dw fixed88_convert_to_str
  .dw fixed1616_convert_to_str
  .dw var_convert_to_str
  .dw true_convert_to_str
  .dw false_convert_to_str
  .dw tstr_ref_convert_to_str
  .dw raw_convert_to_str
  .dw str_convert_to_str
  .dw str_ref_convert_to_str
  .dw single_convert_to_str
  .dw xfloat_convert_to_str
  .dw list_convert_to_str
  .dw list_ref_convert_to_str
_:

ui8_convert_to_str:
  ld a,(de)
  ld hl,OP1
#include "conversion/uitoa_8.z80"

ui16_convert_to_str:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  ld hl,OP1
#include "conversion/uitoa_16.z80"

ui32_convert_to_str:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ld a,(hl)
  inc hl
  ld h,(hl)
  ld l,a
  ex de,hl
  ld ix,OP1+10
  ld (ix),0
#include "conversion/uint32tostr_baseC.z80"

fixed88_convert_to_str:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  ld hl,OP1
#include "conversion/fixed88_to_str.z80"

fixed1616_convert_to_str:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ld a,(hl)
  inc hl
  ld h,(hl)
  ld l,a
  ex de,hl
#include "conversion/fixed1616_to_str.z80"

true_convert_to_str:
false_convert_to_str:
  ld a,(de)
  cp type_false
false_to_str:
  ld hl,s_false
  jr z,+_
true_to_str:
  ld hl,s_true
_:
  ld de,OP1
  ld bc,6
  ldir
  ld hl,OP1
  ret
s_false:
  .db "false",0
s_true:
  .db "true",0

var_convert_to_str:
raw_convert_to_str:
  jp err_syntax

list_ref_convert_to_str:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc de
  inc de
  inc de
list_convert_to_str:
  ex de,hl
  ld c,(hl)
  inc hl
  ld b,(hl)
  inc hl
  ;HL points to the first entry
  ;BC is the number of entries
  ; We wil use the heap to store the string.
  ex de,hl
  ld hl,(heap_ptr)

  ;create a string
  ld (hl),type_str
  inc hl
  inc hl
  inc hl
  ;save the pointer for later
  push hl

  ;write `[`
  ld (hl),$C1
  inc hl
  ex de,hl
  jr list_to_str_begin
list_to_str_loop:
  push hl
  push bc

  ld a,(hl)
  ex de,hl
  cp type_str
  jr z,write_quote
  cp type_tstr_ref
  jr nz,+_
write_quote:
  ld (hl),$22      ;quote
  inc hl
_:
  push af   ;is string?
  push hl   ;where to write
  ld (heap_ptr),hl

  inc de
  call val_adjust_ptr
  ld hl,to_str_LUT
  call jumptableindex
  pop de
  call strcopy
  dec de


  pop af
  jr nz,+_
  ld a,$22      ;quote
  ld (de),a
  inc de
_:

  pop bc
  pop hl
  ld a,c
  dec a
  or b
  jr z,list_to_str_no_comma
  ld a,','
  ld (de),a
  inc de


  ld a,(hl)
  push de
  ld de,type_size_LUT
  add a,e
  ld e,a
  jr nc,$+3
  inc d
  ld a,(de)
  ld d,0
  or a
  jr nz,+_
  inc hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  .db $FE
_:
  ld e,a
  add hl,de
  pop de

  dec bc
list_to_str_begin:
  ld a,b
  or c
  jr nz,list_to_str_loop

list_to_str_no_comma:

  ;write `]`
  ex de,hl
  ld (hl),']'
  inc hl
  xor a   ;reset the c flag for the `sbc hl,de` below
  ld (hl),a
  inc hl
  ld (heap_ptr),hl

;now pop the start of the string and restore heap_ptr
  pop de

;now get the size of the string
  ; or a
  sbc hl,de
  push de
  ex de,hl
  dec hl
  ld (hl),d
  dec hl
  ld (hl),e
  dec hl
  call sto_temp
  pop hl
  ret


tstr_ref_convert_to_str:
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ld c,(hl)
  inc hl
  ld b,(hl)

;DE points to the string
;BC is the size of the existing string
;For now, copy it to xOP2
  ld hl,xOP2
  ex de,hl
  ld a,b
  or c
  jr nz,+_
  ex de,hl
  ld (hl),a
  ret
_:
  call tokstr2ascii
  ld hl,xOP2
  ret


str_convert_to_str:
  ex de,hl
  ret
str_ref_convert_to_str:
  ex de,hl
  ld a,(hl)
  inc hl
  ld h,(hl)
  ld l,a
  inc hl
  ld c,(hl)
  inc hl
  ld b,(hl)
  inc hl
  ret

single_convert_to_str:
  ex de,hl
  ld bc,OP1
  call single2str_p0
  ld h,b
  ld l,c
  ret
xfloat_convert_to_str:
  ex de,hl
  ld bc,OP1
  call xtostr_p0
  ld h,b
  ld l,c
  ret
